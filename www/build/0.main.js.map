{"version":3,"sources":["../../src/pages/upload/upload.module.ts","../../src/pages/upload/upload.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACO;AACd;AACmC;AAcrE,IAAa,YAAY;IAAzB;IAA2B,CAAC;IAAD,mBAAC;AAAD,CAAC;AAAf,YAAY;IAZxB,sFAAQ,CAAC;QACR,YAAY,EAAE;YACZ,uDAAM;SACP;QACD,OAAO,EAAE;YACP,uFAAgB;YAChB,sEAAe,CAAC,QAAQ,CAAC,uDAAM,CAAC;SACjC;QACD,OAAO,EAAE;YACP,uDAAM;SACP;KACF,CAAC;GACW,YAAY,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;ACjBiB;AAC0B;AACV;AACA;AAE3B;AAQ/B,IAAa,MAAM;IAOjB,gBACW,WAAwB,EACxB,WAAwB;QADxB,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAa;QAEjC,IAAI,CAAC,IAAI,GAAG,gDAAQ,CAAC,IAAI,EAAE,CAAC,WAAW;IACzC,CAAC;IAED,+BAAc,GAAd;QACE,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;IACvC,CAAC;IACD,2BAAU,GAAV,UAAW,KAAK;QAAhB,iBAOC;QANC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK;gCACtB,IAAI;YACP,MAAM,GAAG,IAAI,UAAU,EAAE;YAC7B,MAAM,CAAC,MAAM,GAAG,UAAC,CAAC,IAAK,YAAI,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,EAArC,CAAqC;YAC5D,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC;QAClC,CAAC;YAHK,MAAM;QADZ,GAAG,CAAC,CAAa,UAAU,EAAV,SAAI,CAAC,KAAK,EAAV,cAAU,EAAV,IAAU;YAAtB,IAAI,IAAI;oBAAJ,IAAI;SAIZ;IACH,CAAC;IAED,4BAAW,GAAX,UAAa,IAAI,EAAE,YAAY;QAA/B,iBAuBC;QArBC,IAAI,cAAc,GAAG,IAAI,IAAI,CAAC,CAAC,YAAY,CAAC,CAAC;QAC7C,IAAI,QAAQ,GAAG;YACb,WAAW,EAAE,UAAU;YACvB,IAAI,EAAE,UAAU;YAChB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,YAAY,EAAE,IAAI,CAAC,IAAI;SACxB;QACK,0DAAwE,EAAtE,0BAAU,EAAE,cAAI,CAAsD;QAE9E,UAAU,CAAC,EAAE,CAAC,eAAe,EAAE,UAAC,QAAQ;YACtC,kEAAkE;YAClE,yGAAyG;YACzG,IAAI,OAAO,GAAG,CAAC,QAAQ,CAAC,gBAAgB,GAAG,QAAQ,CAAC,UAAU,CAAC,GAAG,GAAG;YACrE,KAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACrC,CAAC,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,UAAC,GAAG;YACZ,KAAI,CAAC,KAAK,GAAG,iBAAiB;YAC9B,OAAO,CAAC,GAAG,CAAE,yBAAyB,EAAE,GAAG,CAAE;QAC/C,CAAC,CAAC;IAEJ,CAAC;IAED,uBAAM,GAAN;QACE,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;IAC3B,CAAC;IAEH,aAAC;AAAD,CAAC;AAvDY,MAAM;IALlB,uFAAS,EAAE;IACX,uFAAS,CAAC;QACT,QAAQ,EAAE,aAAa;OACG;KAC3B,CAAC;sFASmC;QACX,GAAW;AA8CpC;SAvDY,MAAM,mB","file":"0.main.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { Upload } from './upload';\nimport { ComponentsModule } from '../../components/components.module'\n\n@NgModule({\n  declarations: [\n    Upload,\n  ],\n  imports: [\n    ComponentsModule,\n    IonicPageModule.forChild(Upload),\n  ],\n  exports: [\n    Upload\n  ]\n})\nexport class UploadModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/upload/upload.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { AuthService } from '../../providers/auth-service'\nimport { DataService } from '../../providers/data-service'\n\nimport firebase from 'firebase'\n\n\n@IonicPage()\n@Component({\n  selector: 'page-upload',\n  templateUrl: 'upload.html',\n})\nexport class Upload {\n\n  files: File[]\n  user: any\n  state: string\n  progress: string\n\n  constructor(\n      public authService: AuthService,\n      public dataService: DataService\n    ) {\n    this.user = firebase.auth().currentUser\n  }\n\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad Upload');\n  }\n  fileChange(event) {\n    this.files = event.target.files\n    for (let file of this.files) {\n      var reader = new FileReader()\n      reader.onload = (e) => this.processFile(file, reader.result)\n      reader.readAsText(file, 'UTF-8')\n    }\n  }\n\n  processFile (file, readerResult) {\n\n    let textFileAsBlob = new Blob([readerResult])\n    let metadata = {\n      contentType: 'text/xml',\n      desc: 'some XML',\n      lastModified: file.lastModified,\n      originalName: file.name\n    }\n    const { uploadTask, done } = this.dataService.upload(textFileAsBlob, metadata)\n\n    uploadTask.on('state_changed', (snapshot) => {\n      // Observe state change events such as progress, pause, and resume\n      // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n      let percent = (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n      this.progress = percent.toFixed(2);\n    })\n\n    done.then((url) => {\n      this.state = 'upload complete'\n      console.log( 'uploading done then url', url )\n    })\n\n  }\n\n  logout () {\n    this.authService.logout()\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/upload/upload.ts"],"sourceRoot":""}